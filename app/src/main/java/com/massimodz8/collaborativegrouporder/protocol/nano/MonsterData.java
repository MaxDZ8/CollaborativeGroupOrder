// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.massimodz8.collaborativegrouporder.protocol.nano;

@SuppressWarnings("hiding")
public interface MonsterData {

  // enum Race
  public static final int INVALID_RACE = 0;
  public static final int DWARF = 1;
  public static final int ELF = 2;
  public static final int GNOME = 3;
  public static final int HALF_ORC = 4;
  public static final int HALFLING = 5;
  public static final int HUMAN = 6;
  public static final int AASIMAR = 7;
  public static final int CATFOLK = 8;
  public static final int DHAMPIR = 9;
  public static final int DROW = 10;
  public static final int FETCHLING = 11;
  public static final int GOBLIN = 12;
  public static final int HOBGOBLIN = 13;
  public static final int IFRIT = 14;
  public static final int KOBOLD = 15;
  public static final int ORC = 16;
  public static final int OREAD = 17;
  public static final int RATFOLK = 18;
  public static final int SYLPH = 19;
  public static final int TENGU = 20;
  public static final int TIEFLING = 21;
  public static final int UNDINE = 22;
  public static final int GNOLL = 23;
  public static final int LIZARDFOLK = 24;
  public static final int MONKEY_GOBLIN = 25;
  public static final int SKINWALKER = 26;
  public static final int TRIAXIAN = 27;
  public static final int ANDROID = 28;
  public static final int GATHLAIN = 29;
  public static final int GHORAN = 30;
  public static final int KASATHA = 31;
  public static final int LASHUNTA = 32;
  public static final int SHABTI = 33;
  public static final int SYRINX = 34;
  public static final int WYRWOOD = 35;
  public static final int WYVARAN = 36;
  public static final int CENTAUR = 37;
  public static final int OGRE = 38;
  public static final int SHOBHAD = 39;
  public static final int TROX = 40;
  public static final int DRIDER = 41;
  public static final int GARGOYLE = 42;
  public static final int CHANGELING = 43;
  public static final int DUERGAR = 44;
  public static final int GILLMEN = 45;
  public static final int GRIPPLI = 46;
  public static final int KITSUNE = 47;
  public static final int MERFOLK = 48;
  public static final int NAGAJI = 49;
  public static final int SAMSARAN = 50;
  public static final int STRIX = 51;
  public static final int SULI = 52;
  public static final int SVIRFNEBLIN = 53;
  public static final int VANARA = 54;
  public static final int VISHKANYA = 55;
  public static final int WAYANG = 56;
  public static final int AQUATIC_ELF = 57;
  public static final int ASTMOI = 58;
  public static final int CALIGNI = 59;
  public static final int DEEP_ONE_HYBRID = 60;
  public static final int GANZI = 61;
  public static final int KURU = 62;
  public static final int MANAVRI = 63;
  public static final int ORANG__PENDAK = 64;
  public static final int REPTOID = 65;

  // enum ExtraTemplate
  public static final int INVALID_TEMPLATE = 0;
  public static final int ADVANCED = 1;
  public static final int GIANT = 2;
  public static final int MIGHTY = 3;
  public static final int SHRINE__BLESSED = 4;
  public static final int NOCTURNAL = 5;

  // enum Alignment
  public static final int INVALID_ALIGNMENT = 0;
  public static final int LEGAL_GOOD = 1;
  public static final int LEGAL_NEUTRAL = 2;
  public static final int LEGAL_EVIL = 3;
  public static final int NEUTRAL_GOOD = 4;
  public static final int JUST_NEUTRAL = 5;
  public static final int NEUTRAL_EVIL = 6;
  public static final int CHAOTIC_GOOD = 7;
  public static final int CHAOTIC_NEUTRAL = 8;
  public static final int CHAOTIC_EVIL = 9;
  public static final int ALIGNMENT_RESTRICTED = 10;
  public static final int ALIGNMENT_AS_CREATOR = 11;

  // enum MonsterSize
  public static final int INVALID_MONSTER_SIZE = 0;
  public static final int FINE = 1;
  public static final int DIMINUTIVE = 2;
  public static final int TINY = 3;
  public static final int SMALL = 4;
  public static final int MEDIUM = 5;
  public static final int LARGE = 6;
  public static final int HUGE = 7;
  public static final int GARGANTUAN = 8;
  public static final int COLOSSAL = 9;

  // enum MonsterType
  public static final int INVALID_MONSTER_TYPE = 0;
  public static final int ABERRATION = 1;
  public static final int ANIMAL = 2;
  public static final int CONSTRUCT = 3;
  public static final int DRAGON = 4;
  public static final int FEY = 5;
  public static final int HUMANOID = 6;
  public static final int MAGICAL_BEAST = 7;
  public static final int MONSTROUS_HUMANOID = 8;
  public static final int OOZE = 9;
  public static final int OUTSIDER = 10;
  public static final int PLANT = 11;
  public static final int UNDEAD = 12;
  public static final int VERMIN = 13;
  public static final int SUB_ACID = 64;
  public static final int SUB_ADLET = 65;
  public static final int SUB_AEON = 66;
  public static final int SUB_AGATHION = 67;
  public static final int SUB_AIR = 68;
  public static final int SUB_AMPHIBIOUS = 69;
  public static final int SUB_ANGEL = 70;
  public static final int SUB_AQUATIC = 71;
  public static final int SUB_ARCHON = 72;
  public static final int SUB_ASURA = 73;
  public static final int SUB_AZATA = 74;
  public static final int SUB_BEHEMOTH = 75;
  public static final int SUB_BOGGARD = 76;
  public static final int SUB_CATFOLK = 77;
  public static final int SUB_CHAOTIC = 78;
  public static final int SUB_CHARAU__KA = 79;
  public static final int SUB_CLOCKWORK = 80;
  public static final int SUB_COLD = 81;
  public static final int SUB_COLOSSUS = 82;
  public static final int SUB_DAEMON = 83;
  public static final int SUB_DARK_FOLK = 84;
  public static final int SUB_DEEP_ONE = 85;
  public static final int SUB_DEMODAND = 86;
  public static final int SUB_DEMON = 87;
  public static final int SUB_DERRO = 88;
  public static final int SUB_DEVIL = 89;
  public static final int SUB_DIV = 90;
  public static final int SUB_DWARF = 91;
  public static final int SUB_EARTH = 92;
  public static final int SUB_ELECTRICITY = 93;
  public static final int SUB_ELEMENTAL = 94;
  public static final int SUB_ELF = 95;
  public static final int SUB_EVIL = 96;
  public static final int SUB_EXTRAPLANAR = 97;
  public static final int SUB_FEYBLOOD = 98;
  public static final int SUB_FIRE = 99;
  public static final int SUB_GIANT = 100;
  public static final int SUB_GNOLL = 101;
  public static final int SUB_GNOME = 102;
  public static final int SUB_GOBLIN = 103;
  public static final int SUB_GOBLINOID = 104;
  public static final int SUB_GODSPAWN = 105;
  public static final int SUB_GOOD = 106;
  public static final int SUB_GRAVITY = 107;
  public static final int SUB_GREAT_OLD_ONE = 108;
  public static final int SUB_HALFLING = 109;
  public static final int SUB_HERALD = 110;
  public static final int SUB_HORDE = 111;
  public static final int SUB_HUMAN = 112;
  public static final int SUB_HUMANOID = 113;
  public static final int SUB_INCORPOREAL = 114;
  public static final int SUB_INEVITABLE = 115;
  public static final int SUB_KAIJU = 116;
  public static final int SUB_KAMI = 117;
  public static final int SUB_KASATHA = 118;
  public static final int SUB_KITSUNE = 119;
  public static final int SUB_KUAH__LIJ = 120;
  public static final int SUB_KYTON = 121;
  public static final int SUB_LAWFUL = 122;
  public static final int SUB_LESHY = 123;
  public static final int SUB_MYTHIC = 124;
  public static final int SUB_NATIVE = 125;
  public static final int SUB_NIGHTSHADE = 126;
  public static final int SUB_OGREN = 127;
  public static final int SUB_OGRILLON = 128;
  public static final int SUB_ONI = 129;
  public static final int SUB_ORC = 130;
  public static final int SUB_PROTEAN = 131;
  public static final int SUB_PSYCHOPOMP = 132;
  public static final int SUB_QLIPPOTH = 133;
  public static final int SUB_RAKSHASA = 134;
  public static final int SUB_RATFOLK = 135;
  public static final int SUB_REPTILIAN = 136;
  public static final int SUB_ROBOT = 137;
  public static final int SUB_SAMSARAN = 138;
  public static final int SUB_SASQUATCH = 139;
  public static final int SUB_SHAPECHANGER = 140;
  public static final int SUB_SKULK = 141;
  public static final int SUB_STORMWARDEN = 142;
  public static final int SUB_SWARM = 143;
  public static final int SUB_TABAXI = 144;
  public static final int SUB_TENGU = 145;
  public static final int SUB_TIME = 146;
  public static final int SUB_TROOP = 147;
  public static final int SUB_UDAEUS = 148;
  public static final int SUB_UNBREATHING = 149;
  public static final int SUB_VANARA = 150;
  public static final int SUB_VAPOR = 151;
  public static final int SUB_VISHKANYA = 152;
  public static final int SUB_WATER = 153;
  public static final int SUB_WAYANG = 154;
  public static final int SUB_FUNGUS = 155;
  public static final int SUB_PSIONIC = 156;

  public static final class MonsterBook extends
      com.google.protobuf.nano.MessageNano {

    public static final class Entry extends
        com.google.protobuf.nano.MessageNano {

      private static volatile Entry[] _emptyArray;
      public static Entry[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Entry[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional .collaborativeGroupOrder.Monster main = 1;
      public com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster main;

      // repeated .collaborativeGroupOrder.Monster variations = 2;
      public com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster[] variations;

      public Entry() {
        clear();
      }

      public Entry clear() {
        main = null;
        variations = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.emptyArray();
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.main != null) {
          output.writeMessage(1, this.main);
        }
        if (this.variations != null && this.variations.length > 0) {
          for (int i = 0; i < this.variations.length; i++) {
            com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster element = this.variations[i];
            if (element != null) {
              output.writeMessage(2, element);
            }
          }
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.main != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(1, this.main);
        }
        if (this.variations != null && this.variations.length > 0) {
          for (int i = 0; i < this.variations.length; i++) {
            com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster element = this.variations[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(2, element);
            }
          }
        }
        return size;
      }

      @Override
      public Entry mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              if (this.main == null) {
                this.main = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster();
              }
              input.readMessage(this.main);
              break;
            }
            case 18: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 18);
              int i = this.variations == null ? 0 : this.variations.length;
              com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster[] newArray =
                  new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.variations, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster();
              input.readMessage(newArray[i]);
              this.variations = newArray;
              break;
            }
          }
        }
      }

      public static Entry parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Entry(), data);
      }

      public static Entry parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Entry().mergeFrom(input);
      }
    }

    private static volatile MonsterBook[] _emptyArray;
    public static MonsterBook[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new MonsterBook[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .google.protobuf.Timestamp created = 1;
    public com.google.protobuf.nano.Timestamp created;

    // repeated .collaborativeGroupOrder.MonsterBook.Entry entries = 2;
    public com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MonsterBook.Entry[] entries;

    // repeated string presentationGroup = 3;
    public java.lang.String[] presentationGroup;

    public MonsterBook() {
      clear();
    }

    public MonsterBook clear() {
      created = null;
      entries = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MonsterBook.Entry.emptyArray();
      presentationGroup = com.google.protobuf.nano.WireFormatNano.EMPTY_STRING_ARRAY;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.created != null) {
        output.writeMessage(1, this.created);
      }
      if (this.entries != null && this.entries.length > 0) {
        for (int i = 0; i < this.entries.length; i++) {
          com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MonsterBook.Entry element = this.entries[i];
          if (element != null) {
            output.writeMessage(2, element);
          }
        }
      }
      if (this.presentationGroup != null && this.presentationGroup.length > 0) {
        for (int i = 0; i < this.presentationGroup.length; i++) {
          java.lang.String element = this.presentationGroup[i];
          if (element != null) {
            output.writeString(3, element);
          }
        }
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.created != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(1, this.created);
      }
      if (this.entries != null && this.entries.length > 0) {
        for (int i = 0; i < this.entries.length; i++) {
          com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MonsterBook.Entry element = this.entries[i];
          if (element != null) {
            size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeMessageSize(2, element);
          }
        }
      }
      if (this.presentationGroup != null && this.presentationGroup.length > 0) {
        int dataCount = 0;
        int dataSize = 0;
        for (int i = 0; i < this.presentationGroup.length; i++) {
          java.lang.String element = this.presentationGroup[i];
          if (element != null) {
            dataCount++;
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeStringSizeNoTag(element);
          }
        }
        size += dataSize;
        size += 1 * dataCount;
      }
      return size;
    }

    @Override
    public MonsterBook mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            if (this.created == null) {
              this.created = new com.google.protobuf.nano.Timestamp();
            }
            input.readMessage(this.created);
            break;
          }
          case 18: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 18);
            int i = this.entries == null ? 0 : this.entries.length;
            com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MonsterBook.Entry[] newArray =
                new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MonsterBook.Entry[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.entries, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MonsterBook.Entry();
              input.readMessage(newArray[i]);
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MonsterBook.Entry();
            input.readMessage(newArray[i]);
            this.entries = newArray;
            break;
          }
          case 26: {
            int arrayLength = com.google.protobuf.nano.WireFormatNano
                .getRepeatedFieldArrayLength(input, 26);
            int i = this.presentationGroup == null ? 0 : this.presentationGroup.length;
            java.lang.String[] newArray = new java.lang.String[i + arrayLength];
            if (i != 0) {
              java.lang.System.arraycopy(this.presentationGroup, 0, newArray, 0, i);
            }
            for (; i < newArray.length - 1; i++) {
              newArray[i] = input.readString();
              input.readTag();
            }
            // Last one without readTag.
            newArray[i] = input.readString();
            this.presentationGroup = newArray;
            break;
          }
        }
      }
    }

    public static MonsterBook parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new MonsterBook(), data);
    }

    public static MonsterBook parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new MonsterBook().mergeFrom(input);
    }
  }

  public static final class Monster extends
      com.google.protobuf.nano.MessageNano {

    // enum TagType
    public static final int TT_INVALID = 0;
    public static final int TT_SUBTYPE = 1;
    public static final int TT_AUGMENTING = 2;
    public static final int TT_RACE = 3;
    public static final int TT_EXTRA_TEMPLATE = 4;
    public static final int TT_CONDITIONAL_INITIATIVE = 5;
    public static final int TT_EXTRA_METADATA = 6;

    // enum KnownTemplate
    public static final int KT_INVALID = 0;
    public static final int KT_DIRE = 1;
    public static final int KT_GIANT = 2;
    public static final int KT_PETITIONER = 3;

    public static final class Header extends
        com.google.protobuf.nano.MessageNano {

      private static volatile Header[] _emptyArray;
      public static Header[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Header[0];
            }
          }
        }
        return _emptyArray;
      }

      // repeated string name = 1;
      public java.lang.String[] name;

      // optional .collaborativeGroupOrder.Monster.ChallangeRatio cr = 2;
      public com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ChallangeRatio cr;

      // repeated .collaborativeGroupOrder.Alignment alignment = 3;
      public int[] alignment;

      // optional .collaborativeGroupOrder.MonsterSize size = 4;
      public int size;

      // optional .collaborativeGroupOrder.MonsterType type = 5;
      public int type;

      // optional int32 initiative = 6;
      public int initiative;

      // optional string example = 7;
      public java.lang.String example;

      // repeated .collaborativeGroupOrder.Monster.Tag tags = 8;
      public com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Tag[] tags;

      public Header() {
        clear();
      }

      public Header clear() {
        name = com.google.protobuf.nano.WireFormatNano.EMPTY_STRING_ARRAY;
        cr = null;
        alignment = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
        size = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_SIZE;
        type = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE;
        initiative = 0;
        example = "";
        tags = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Tag.emptyArray();
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.name != null && this.name.length > 0) {
          for (int i = 0; i < this.name.length; i++) {
            java.lang.String element = this.name[i];
            if (element != null) {
              output.writeString(1, element);
            }
          }
        }
        if (this.cr != null) {
          output.writeMessage(2, this.cr);
        }
        if (this.alignment != null && this.alignment.length > 0) {
          for (int i = 0; i < this.alignment.length; i++) {
            output.writeInt32(3, this.alignment[i]);
          }
        }
        if (this.size != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_SIZE) {
          output.writeInt32(4, this.size);
        }
        if (this.type != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE) {
          output.writeInt32(5, this.type);
        }
        if (this.initiative != 0) {
          output.writeInt32(6, this.initiative);
        }
        if (!this.example.equals("")) {
          output.writeString(7, this.example);
        }
        if (this.tags != null && this.tags.length > 0) {
          for (int i = 0; i < this.tags.length; i++) {
            com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Tag element = this.tags[i];
            if (element != null) {
              output.writeMessage(8, element);
            }
          }
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.name != null && this.name.length > 0) {
          int dataCount = 0;
          int dataSize = 0;
          for (int i = 0; i < this.name.length; i++) {
            java.lang.String element = this.name[i];
            if (element != null) {
              dataCount++;
              dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                  .computeStringSizeNoTag(element);
            }
          }
          size += dataSize;
          size += 1 * dataCount;
        }
        if (this.cr != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(2, this.cr);
        }
        if (this.alignment != null && this.alignment.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.alignment.length; i++) {
            int element = this.alignment[i];
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * this.alignment.length;
        }
        if (this.size != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_SIZE) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.size);
        }
        if (this.type != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(5, this.type);
        }
        if (this.initiative != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(6, this.initiative);
        }
        if (!this.example.equals("")) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(7, this.example);
        }
        if (this.tags != null && this.tags.length > 0) {
          for (int i = 0; i < this.tags.length; i++) {
            com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Tag element = this.tags[i];
            if (element != null) {
              size += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeMessageSize(8, element);
            }
          }
        }
        return size;
      }

      @Override
      public Header mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 10);
              int i = this.name == null ? 0 : this.name.length;
              java.lang.String[] newArray = new java.lang.String[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.name, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = input.readString();
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = input.readString();
              this.name = newArray;
              break;
            }
            case 18: {
              if (this.cr == null) {
                this.cr = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ChallangeRatio();
              }
              input.readMessage(this.cr);
              break;
            }
            case 24: {
              int length = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 24);
              int[] validValues = new int[length];
              int validCount = 0;
              for (int i = 0; i < length; i++) {
                if (i != 0) { // tag for first value already consumed.
                  input.readTag();
                }
                int value = input.readInt32();
                switch (value) {
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_ALIGNMENT:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LEGAL_GOOD:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LEGAL_NEUTRAL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LEGAL_EVIL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.NEUTRAL_GOOD:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.JUST_NEUTRAL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.NEUTRAL_EVIL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHAOTIC_GOOD:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHAOTIC_NEUTRAL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHAOTIC_EVIL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ALIGNMENT_RESTRICTED:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ALIGNMENT_AS_CREATOR:
                    validValues[validCount++] = value;
                    break;
                }
              }
              if (validCount != 0) {
                int i = this.alignment == null ? 0 : this.alignment.length;
                if (i == 0 && validCount == validValues.length) {
                  this.alignment = validValues;
                } else {
                  int[] newArray = new int[i + validCount];
                  if (i != 0) {
                    java.lang.System.arraycopy(this.alignment, 0, newArray, 0, i);
                  }
                  java.lang.System.arraycopy(validValues, 0, newArray, i, validCount);
                  this.alignment = newArray;
                }
              }
              break;
            }
            case 26: {
              int bytes = input.readRawVarint32();
              int limit = input.pushLimit(bytes);
              // First pass to compute array length.
              int arrayLength = 0;
              int startPos = input.getPosition();
              while (input.getBytesUntilLimit() > 0) {
                switch (input.readInt32()) {
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_ALIGNMENT:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LEGAL_GOOD:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LEGAL_NEUTRAL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LEGAL_EVIL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.NEUTRAL_GOOD:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.JUST_NEUTRAL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.NEUTRAL_EVIL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHAOTIC_GOOD:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHAOTIC_NEUTRAL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHAOTIC_EVIL:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ALIGNMENT_RESTRICTED:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ALIGNMENT_AS_CREATOR:
                    arrayLength++;
                    break;
                }
              }
              if (arrayLength != 0) {
                input.rewindToPosition(startPos);
                int i = this.alignment == null ? 0 : this.alignment.length;
                int[] newArray = new int[i + arrayLength];
                if (i != 0) {
                  java.lang.System.arraycopy(this.alignment, 0, newArray, 0, i);
                }
                while (input.getBytesUntilLimit() > 0) {
                  int value = input.readInt32();
                  switch (value) {
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_ALIGNMENT:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LEGAL_GOOD:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LEGAL_NEUTRAL:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LEGAL_EVIL:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.NEUTRAL_GOOD:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.JUST_NEUTRAL:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.NEUTRAL_EVIL:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHAOTIC_GOOD:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHAOTIC_NEUTRAL:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHAOTIC_EVIL:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ALIGNMENT_RESTRICTED:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ALIGNMENT_AS_CREATOR:
                      newArray[i++] = value;
                      break;
                  }
                }
                this.alignment = newArray;
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_SIZE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.FINE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DIMINUTIVE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.TINY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SMALL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MEDIUM:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LARGE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.HUGE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GARGANTUAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.COLOSSAL:
                  this.size = value;
                  break;
              }
              break;
            }
            case 40: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ABERRATION:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ANIMAL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CONSTRUCT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DRAGON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.FEY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.HUMANOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MAGICAL_BEAST:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MONSTROUS_HUMANOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.OOZE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.OUTSIDER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.PLANT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.UNDEAD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.VERMIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ACID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ADLET:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AEON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AGATHION:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AIR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AMPHIBIOUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ANGEL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AQUATIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ARCHON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ASURA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AZATA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_BEHEMOTH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_BOGGARD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CATFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CHAOTIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CHARAU__KA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CLOCKWORK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_COLD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_COLOSSUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DAEMON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DARK_FOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEEP_ONE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEMODAND:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEMON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DERRO:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEVIL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DIV:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DWARF:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_EARTH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ELECTRICITY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ELEMENTAL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ELF:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_EVIL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_EXTRAPLANAR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_FEYBLOOD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_FIRE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GIANT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GNOLL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GNOME:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GOBLIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GOBLINOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GODSPAWN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GOOD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GRAVITY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GREAT_OLD_ONE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HALFLING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HERALD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HORDE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HUMAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HUMANOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_INCORPOREAL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_INEVITABLE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KAIJU:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KAMI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KASATHA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KITSUNE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KUAH__LIJ:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KYTON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_LAWFUL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_LESHY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_MYTHIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_NATIVE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_NIGHTSHADE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_OGREN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_OGRILLON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ONI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ORC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_PROTEAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_PSYCHOPOMP:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_QLIPPOTH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_RAKSHASA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_RATFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_REPTILIAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ROBOT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SAMSARAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SASQUATCH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SHAPECHANGER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SKULK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_STORMWARDEN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SWARM:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TABAXI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TENGU:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TIME:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TROOP:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_UDAEUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_UNBREATHING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_VANARA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_VAPOR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_VISHKANYA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_WATER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_WAYANG:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_FUNGUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_PSIONIC:
                  this.type = value;
                  break;
              }
              break;
            }
            case 48: {
              this.initiative = input.readInt32();
              break;
            }
            case 58: {
              this.example = input.readString();
              break;
            }
            case 66: {
              int arrayLength = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 66);
              int i = this.tags == null ? 0 : this.tags.length;
              com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Tag[] newArray =
                  new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Tag[i + arrayLength];
              if (i != 0) {
                java.lang.System.arraycopy(this.tags, 0, newArray, 0, i);
              }
              for (; i < newArray.length - 1; i++) {
                newArray[i] = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Tag();
                input.readMessage(newArray[i]);
                input.readTag();
              }
              // Last one without readTag.
              newArray[i] = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Tag();
              input.readMessage(newArray[i]);
              this.tags = newArray;
              break;
            }
          }
        }
      }

      public static Header parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Header(), data);
      }

      public static Header parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Header().mergeFrom(input);
      }
    }

    public static final class ChallangeRatio extends
        com.google.protobuf.nano.MessageNano {

      private static volatile ChallangeRatio[] _emptyArray;
      public static ChallangeRatio[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new ChallangeRatio[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional uint32 numerator = 1;
      public int numerator;

      // optional uint32 denominator = 2;
      public int denominator;

      public ChallangeRatio() {
        clear();
      }

      public ChallangeRatio clear() {
        numerator = 0;
        denominator = 0;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.numerator != 0) {
          output.writeUInt32(1, this.numerator);
        }
        if (this.denominator != 0) {
          output.writeUInt32(2, this.denominator);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.numerator != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt32Size(1, this.numerator);
        }
        if (this.denominator != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt32Size(2, this.denominator);
        }
        return size;
      }

      @Override
      public ChallangeRatio mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              this.numerator = input.readUInt32();
              break;
            }
            case 16: {
              this.denominator = input.readUInt32();
              break;
            }
          }
        }
      }

      public static ChallangeRatio parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new ChallangeRatio(), data);
      }

      public static ChallangeRatio parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new ChallangeRatio().mergeFrom(input);
      }
    }

    public static final class Tag extends
        com.google.protobuf.nano.MessageNano {

      private static volatile Tag[] _emptyArray;
      public static Tag[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new Tag[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional .collaborativeGroupOrder.Monster.TagType type = 1;
      public int type;

      // optional .collaborativeGroupOrder.MonsterType subtype = 2;
      public int subtype;

      // optional .collaborativeGroupOrder.MonsterType augmenting = 3;
      public int augmenting;

      // optional .collaborativeGroupOrder.Race race = 4;
      public int race;

      // optional .collaborativeGroupOrder.ExtraTemplate extraTemplate = 5;
      public int extraTemplate;

      // optional .collaborativeGroupOrder.Monster.ConditionalInitiative ctxInit = 6;
      public com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative ctxInit;

      // optional .collaborativeGroupOrder.Monster.MetaData note = 7;
      public com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData note;

      public Tag() {
        clear();
      }

      public Tag clear() {
        type = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_INVALID;
        subtype = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE;
        augmenting = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE;
        race = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_RACE;
        extraTemplate = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_TEMPLATE;
        ctxInit = null;
        note = null;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.type != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_INVALID) {
          output.writeInt32(1, this.type);
        }
        if (this.subtype != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE) {
          output.writeInt32(2, this.subtype);
        }
        if (this.augmenting != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE) {
          output.writeInt32(3, this.augmenting);
        }
        if (this.race != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_RACE) {
          output.writeInt32(4, this.race);
        }
        if (this.extraTemplate != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_TEMPLATE) {
          output.writeInt32(5, this.extraTemplate);
        }
        if (this.ctxInit != null) {
          output.writeMessage(6, this.ctxInit);
        }
        if (this.note != null) {
          output.writeMessage(7, this.note);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.type != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_INVALID) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.type);
        }
        if (this.subtype != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.subtype);
        }
        if (this.augmenting != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.augmenting);
        }
        if (this.race != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_RACE) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(4, this.race);
        }
        if (this.extraTemplate != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_TEMPLATE) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(5, this.extraTemplate);
        }
        if (this.ctxInit != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(6, this.ctxInit);
        }
        if (this.note != null) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeMessageSize(7, this.note);
        }
        return size;
      }

      @Override
      public Tag mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_INVALID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_SUBTYPE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_AUGMENTING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_RACE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_EXTRA_TEMPLATE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_CONDITIONAL_INITIATIVE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.TT_EXTRA_METADATA:
                  this.type = value;
                  break;
              }
              break;
            }
            case 16: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ABERRATION:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ANIMAL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CONSTRUCT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DRAGON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.FEY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.HUMANOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MAGICAL_BEAST:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MONSTROUS_HUMANOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.OOZE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.OUTSIDER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.PLANT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.UNDEAD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.VERMIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ACID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ADLET:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AEON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AGATHION:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AIR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AMPHIBIOUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ANGEL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AQUATIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ARCHON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ASURA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AZATA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_BEHEMOTH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_BOGGARD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CATFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CHAOTIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CHARAU__KA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CLOCKWORK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_COLD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_COLOSSUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DAEMON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DARK_FOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEEP_ONE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEMODAND:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEMON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DERRO:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEVIL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DIV:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DWARF:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_EARTH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ELECTRICITY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ELEMENTAL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ELF:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_EVIL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_EXTRAPLANAR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_FEYBLOOD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_FIRE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GIANT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GNOLL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GNOME:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GOBLIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GOBLINOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GODSPAWN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GOOD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GRAVITY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GREAT_OLD_ONE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HALFLING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HERALD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HORDE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HUMAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HUMANOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_INCORPOREAL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_INEVITABLE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KAIJU:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KAMI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KASATHA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KITSUNE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KUAH__LIJ:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KYTON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_LAWFUL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_LESHY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_MYTHIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_NATIVE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_NIGHTSHADE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_OGREN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_OGRILLON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ONI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ORC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_PROTEAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_PSYCHOPOMP:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_QLIPPOTH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_RAKSHASA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_RATFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_REPTILIAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ROBOT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SAMSARAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SASQUATCH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SHAPECHANGER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SKULK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_STORMWARDEN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SWARM:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TABAXI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TENGU:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TIME:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TROOP:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_UDAEUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_UNBREATHING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_VANARA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_VAPOR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_VISHKANYA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_WATER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_WAYANG:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_FUNGUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_PSIONIC:
                  this.subtype = value;
                  break;
              }
              break;
            }
            case 24: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_MONSTER_TYPE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ABERRATION:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ANIMAL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CONSTRUCT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DRAGON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.FEY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.HUMANOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MAGICAL_BEAST:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MONSTROUS_HUMANOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.OOZE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.OUTSIDER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.PLANT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.UNDEAD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.VERMIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ACID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ADLET:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AEON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AGATHION:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AIR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AMPHIBIOUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ANGEL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AQUATIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ARCHON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ASURA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_AZATA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_BEHEMOTH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_BOGGARD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CATFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CHAOTIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CHARAU__KA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_CLOCKWORK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_COLD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_COLOSSUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DAEMON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DARK_FOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEEP_ONE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEMODAND:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEMON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DERRO:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DEVIL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DIV:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_DWARF:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_EARTH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ELECTRICITY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ELEMENTAL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ELF:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_EVIL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_EXTRAPLANAR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_FEYBLOOD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_FIRE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GIANT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GNOLL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GNOME:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GOBLIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GOBLINOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GODSPAWN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GOOD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GRAVITY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_GREAT_OLD_ONE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HALFLING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HERALD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HORDE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HUMAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_HUMANOID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_INCORPOREAL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_INEVITABLE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KAIJU:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KAMI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KASATHA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KITSUNE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KUAH__LIJ:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_KYTON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_LAWFUL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_LESHY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_MYTHIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_NATIVE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_NIGHTSHADE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_OGREN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_OGRILLON:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ONI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ORC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_PROTEAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_PSYCHOPOMP:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_QLIPPOTH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_RAKSHASA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_RATFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_REPTILIAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_ROBOT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SAMSARAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SASQUATCH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SHAPECHANGER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SKULK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_STORMWARDEN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_SWARM:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TABAXI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TENGU:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TIME:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_TROOP:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_UDAEUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_UNBREATHING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_VANARA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_VAPOR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_VISHKANYA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_WATER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_WAYANG:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_FUNGUS:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SUB_PSIONIC:
                  this.augmenting = value;
                  break;
              }
              break;
            }
            case 32: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_RACE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DWARF:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ELF:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GNOME:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.HALF_ORC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.HALFLING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.HUMAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.AASIMAR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CATFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DHAMPIR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DROW:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.FETCHLING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GOBLIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.HOBGOBLIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.IFRIT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.KOBOLD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ORC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.OREAD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.RATFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SYLPH:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.TENGU:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.TIEFLING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.UNDINE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GNOLL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LIZARDFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MONKEY_GOBLIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SKINWALKER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.TRIAXIAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ANDROID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GATHLAIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GHORAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.KASATHA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.LASHUNTA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SHABTI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SYRINX:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.WYRWOOD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.WYVARAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CENTAUR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.OGRE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SHOBHAD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.TROX:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DRIDER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GARGOYLE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CHANGELING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DUERGAR:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GILLMEN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GRIPPLI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.KITSUNE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MERFOLK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.NAGAJI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SAMSARAN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.STRIX:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SULI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SVIRFNEBLIN:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.VANARA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.VISHKANYA:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.WAYANG:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.AQUATIC_ELF:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ASTMOI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.CALIGNI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.DEEP_ONE_HYBRID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GANZI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.KURU:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MANAVRI:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ORANG__PENDAK:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.REPTOID:
                  this.race = value;
                  break;
              }
              break;
            }
            case 40: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.INVALID_TEMPLATE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.ADVANCED:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.GIANT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.MIGHTY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.SHRINE__BLESSED:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.NOCTURNAL:
                  this.extraTemplate = value;
                  break;
              }
              break;
            }
            case 50: {
              if (this.ctxInit == null) {
                this.ctxInit = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative();
              }
              input.readMessage(this.ctxInit);
              break;
            }
            case 58: {
              if (this.note == null) {
                this.note = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData();
              }
              input.readMessage(this.note);
              break;
            }
          }
        }
      }

      public static Tag parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new Tag(), data);
      }

      public static Tag parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new Tag().mergeFrom(input);
      }
    }

    public static final class ConditionalInitiative extends
        com.google.protobuf.nano.MessageNano {

      // enum Condition
      public static final int CONDITION_INVALID = 0;
      public static final int ACTION_CLIMB = 1;

      // enum ExprToken
      public static final int TOKEN_INVALID = 0;
      public static final int TREE = 1;

      private static volatile ConditionalInitiative[] _emptyArray;
      public static ConditionalInitiative[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new ConditionalInitiative[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional int32 init = 1;
      public int init;

      // optional .collaborativeGroupOrder.Monster.ConditionalInitiative.Condition when = 2;
      public int when;

      // repeated .collaborativeGroupOrder.Monster.ConditionalInitiative.ExprToken params = 3;
      public int[] params;

      public ConditionalInitiative() {
        clear();
      }

      public ConditionalInitiative clear() {
        init = 0;
        when = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.CONDITION_INVALID;
        params = com.google.protobuf.nano.WireFormatNano.EMPTY_INT_ARRAY;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.init != 0) {
          output.writeInt32(1, this.init);
        }
        if (this.when != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.CONDITION_INVALID) {
          output.writeInt32(2, this.when);
        }
        if (this.params != null && this.params.length > 0) {
          for (int i = 0; i < this.params.length; i++) {
            output.writeInt32(3, this.params[i]);
          }
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.init != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeInt32Size(1, this.init);
        }
        if (this.when != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.CONDITION_INVALID) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.when);
        }
        if (this.params != null && this.params.length > 0) {
          int dataSize = 0;
          for (int i = 0; i < this.params.length; i++) {
            int element = this.params[i];
            dataSize += com.google.protobuf.nano.CodedOutputByteBufferNano
                .computeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * this.params.length;
        }
        return size;
      }

      @Override
      public ConditionalInitiative mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              this.init = input.readInt32();
              break;
            }
            case 16: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.CONDITION_INVALID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.ACTION_CLIMB:
                  this.when = value;
                  break;
              }
              break;
            }
            case 24: {
              int length = com.google.protobuf.nano.WireFormatNano
                  .getRepeatedFieldArrayLength(input, 24);
              int[] validValues = new int[length];
              int validCount = 0;
              for (int i = 0; i < length; i++) {
                if (i != 0) { // tag for first value already consumed.
                  input.readTag();
                }
                int value = input.readInt32();
                switch (value) {
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.TOKEN_INVALID:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.TREE:
                    validValues[validCount++] = value;
                    break;
                }
              }
              if (validCount != 0) {
                int i = this.params == null ? 0 : this.params.length;
                if (i == 0 && validCount == validValues.length) {
                  this.params = validValues;
                } else {
                  int[] newArray = new int[i + validCount];
                  if (i != 0) {
                    java.lang.System.arraycopy(this.params, 0, newArray, 0, i);
                  }
                  java.lang.System.arraycopy(validValues, 0, newArray, i, validCount);
                  this.params = newArray;
                }
              }
              break;
            }
            case 26: {
              int bytes = input.readRawVarint32();
              int limit = input.pushLimit(bytes);
              // First pass to compute array length.
              int arrayLength = 0;
              int startPos = input.getPosition();
              while (input.getBytesUntilLimit() > 0) {
                switch (input.readInt32()) {
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.TOKEN_INVALID:
                  case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.TREE:
                    arrayLength++;
                    break;
                }
              }
              if (arrayLength != 0) {
                input.rewindToPosition(startPos);
                int i = this.params == null ? 0 : this.params.length;
                int[] newArray = new int[i + arrayLength];
                if (i != 0) {
                  java.lang.System.arraycopy(this.params, 0, newArray, 0, i);
                }
                while (input.getBytesUntilLimit() > 0) {
                  int value = input.readInt32();
                  switch (value) {
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.TOKEN_INVALID:
                    case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.ConditionalInitiative.TREE:
                      newArray[i++] = value;
                      break;
                  }
                }
                this.params = newArray;
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }

      public static ConditionalInitiative parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new ConditionalInitiative(), data);
      }

      public static ConditionalInitiative parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new ConditionalInitiative().mergeFrom(input);
      }
    }

    public static final class MetaData extends
        com.google.protobuf.nano.MessageNano {

      // enum Type
      public static final int INVALID = 0;
      public static final int MATURITY = 1;
      public static final int PUBLISHER = 2;
      public static final int ADDITIONAL_SELECTION_INFO = 3;
      public static final int PRESENTATION_GROUP = 4;
      public static final int GENERIC_VARIANT = 5;
      public static final int VARIANT_MORPH_TARGET = 6;
      public static final int VARIANT_SIZE = 7;
      public static final int APPLIED_TEMPLATE = 8;

      // enum Maturity
      public static final int M_INVALID = 0;
      public static final int DA_WYRMLING = 1;
      public static final int DA_VERY_YOUNG = 2;
      public static final int DA_YOUNG = 3;
      public static final int DA_JUVENILE = 4;
      public static final int DA_YOUNG_ADULT = 5;
      public static final int DA_ADULT = 6;
      public static final int DA_MATURE_ADULT = 7;
      public static final int DA_OLD = 8;
      public static final int DA_VERY_OLD = 9;
      public static final int DA_ANCIENT = 10;
      public static final int DA_WYRM = 11;
      public static final int DA_GREAT_WYRM = 12;
      public static final int EG_SMALL = 13;
      public static final int EG_MEDIUM = 14;
      public static final int EG_LARGE = 15;
      public static final int EG_HUGE = 16;
      public static final int EG_GREATER = 17;
      public static final int EG_ELDER = 18;

      // enum Publisher
      public static final int P_INVALID = 0;
      public static final int P_THIRD_PART_GENERIC = 1;
      public static final int P_FGG = 2;
      public static final int P_OD = 3;
      public static final int P_TO = 4;
      public static final int P_JBE = 5;
      public static final int P_CGP = 6;
      public static final int P_SMG = 7;
      public static final int P_KP = 8;

      private static volatile MetaData[] _emptyArray;
      public static MetaData[] emptyArray() {
        // Lazily initializes the empty array
        if (_emptyArray == null) {
          synchronized (
              com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
            if (_emptyArray == null) {
              _emptyArray = new MetaData[0];
            }
          }
        }
        return _emptyArray;
      }

      // optional .collaborativeGroupOrder.Monster.MetaData.Type type = 1;
      public int type;

      // optional .collaborativeGroupOrder.Monster.MetaData.Maturity maturity = 2;
      public int maturity;

      // optional .collaborativeGroupOrder.Monster.MetaData.Publisher publisher = 3;
      public int publisher;

      // optional string selectionInfo = 4;
      public java.lang.String selectionInfo;

      // optional uint32 group = 5;
      public int group;

      // optional .collaborativeGroupOrder.Monster.KnownTemplate appliedTemplate = 6;
      public int appliedTemplate;

      public MetaData() {
        clear();
      }

      public MetaData clear() {
        type = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.INVALID;
        maturity = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.M_INVALID;
        publisher = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_INVALID;
        selectionInfo = "";
        group = 0;
        appliedTemplate = com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.KT_INVALID;
        cachedSize = -1;
        return this;
      }

      @Override
      public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
          throws java.io.IOException {
        if (this.type != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.INVALID) {
          output.writeInt32(1, this.type);
        }
        if (this.maturity != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.M_INVALID) {
          output.writeInt32(2, this.maturity);
        }
        if (this.publisher != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_INVALID) {
          output.writeInt32(3, this.publisher);
        }
        if (!this.selectionInfo.equals("")) {
          output.writeString(4, this.selectionInfo);
        }
        if (this.group != 0) {
          output.writeUInt32(5, this.group);
        }
        if (this.appliedTemplate != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.KT_INVALID) {
          output.writeInt32(6, this.appliedTemplate);
        }
        super.writeTo(output);
      }

      @Override
      protected int computeSerializedSize() {
        int size = super.computeSerializedSize();
        if (this.type != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.INVALID) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(1, this.type);
        }
        if (this.maturity != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.M_INVALID) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(2, this.maturity);
        }
        if (this.publisher != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_INVALID) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(3, this.publisher);
        }
        if (!this.selectionInfo.equals("")) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeStringSize(4, this.selectionInfo);
        }
        if (this.group != 0) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
              .computeUInt32Size(5, this.group);
        }
        if (this.appliedTemplate != com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.KT_INVALID) {
          size += com.google.protobuf.nano.CodedOutputByteBufferNano
            .computeInt32Size(6, this.appliedTemplate);
        }
        return size;
      }

      @Override
      public MetaData mergeFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.INVALID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.MATURITY:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.PUBLISHER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.ADDITIONAL_SELECTION_INFO:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.PRESENTATION_GROUP:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.GENERIC_VARIANT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.VARIANT_MORPH_TARGET:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.VARIANT_SIZE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.APPLIED_TEMPLATE:
                  this.type = value;
                  break;
              }
              break;
            }
            case 16: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.M_INVALID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_WYRMLING:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_VERY_YOUNG:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_YOUNG:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_JUVENILE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_YOUNG_ADULT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_ADULT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_MATURE_ADULT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_OLD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_VERY_OLD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_ANCIENT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_WYRM:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.DA_GREAT_WYRM:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.EG_SMALL:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.EG_MEDIUM:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.EG_LARGE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.EG_HUGE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.EG_GREATER:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.EG_ELDER:
                  this.maturity = value;
                  break;
              }
              break;
            }
            case 24: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_INVALID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_THIRD_PART_GENERIC:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_FGG:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_OD:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_TO:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_JBE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_CGP:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_SMG:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.MetaData.P_KP:
                  this.publisher = value;
                  break;
              }
              break;
            }
            case 34: {
              this.selectionInfo = input.readString();
              break;
            }
            case 40: {
              this.group = input.readUInt32();
              break;
            }
            case 48: {
              int value = input.readInt32();
              switch (value) {
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.KT_INVALID:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.KT_DIRE:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.KT_GIANT:
                case com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.KT_PETITIONER:
                  this.appliedTemplate = value;
                  break;
              }
              break;
            }
          }
        }
      }

      public static MetaData parseFrom(byte[] data)
          throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
        return com.google.protobuf.nano.MessageNano.mergeFrom(new MetaData(), data);
      }

      public static MetaData parseFrom(
              com.google.protobuf.nano.CodedInputByteBufferNano input)
          throws java.io.IOException {
        return new MetaData().mergeFrom(input);
      }
    }

    private static volatile Monster[] _emptyArray;
    public static Monster[] emptyArray() {
      // Lazily initializes the empty array
      if (_emptyArray == null) {
        synchronized (
            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
          if (_emptyArray == null) {
            _emptyArray = new Monster[0];
          }
        }
      }
      return _emptyArray;
    }

    // optional .collaborativeGroupOrder.Monster.Header header = 1;
    public com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Header header;

    public Monster() {
      clear();
    }

    public Monster clear() {
      header = null;
      cachedSize = -1;
      return this;
    }

    @Override
    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
        throws java.io.IOException {
      if (this.header != null) {
        output.writeMessage(1, this.header);
      }
      super.writeTo(output);
    }

    @Override
    protected int computeSerializedSize() {
      int size = super.computeSerializedSize();
      if (this.header != null) {
        size += com.google.protobuf.nano.CodedOutputByteBufferNano
          .computeMessageSize(1, this.header);
      }
      return size;
    }

    @Override
    public Monster mergeFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            if (this.header == null) {
              this.header = new com.massimodz8.collaborativegrouporder.protocol.nano.MonsterData.Monster.Header();
            }
            input.readMessage(this.header);
            break;
          }
        }
      }
    }

    public static Monster parseFrom(byte[] data)
        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
      return com.google.protobuf.nano.MessageNano.mergeFrom(new Monster(), data);
    }

    public static Monster parseFrom(
            com.google.protobuf.nano.CodedInputByteBufferNano input)
        throws java.io.IOException {
      return new Monster().mergeFrom(input);
    }
  }
}
