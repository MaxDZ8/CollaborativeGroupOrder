syntax = "proto3";
option java_package = "com.massimodz8.collaborativegrouporder.protocol";
import "LevelAdvancement.proto";
import "RPGClass.proto";



// Hello server, I am device (unknown), can you tell me which groups are you running?
// If the server thinks the device version is compatible, it will reply GroupInfo. Otherwise it will terminate connection.
//
// The reply is always GroupInfo, but its contents depend on whatever the server is forming a group or not.
// The server will set GroupInfo.forming accordingly and when it's true, it will also set a doormat.
// The client will then have to send another Hello with authorize set to a matching key.
message Hello {
    uint32 version = 1; // default 0 is an invalid version, this must be set from code and sent across the wire.
    bytes authorize = 2; // invalid to use both verify and authorize.
}


message GroupInfo {
    uint32 version = 1; // default --> invalid. This is compatible but can be used to give an hint to upgrade
    string name = 2;
    repeated string options = 3; // "master_initiative_rolls", "scribble", "health_points", "temporary_effects"
    bool forming = 4; // if true we're going to accept new devices in the group, otherwise we go adventuring and the group is 'closed'
    bytes doormat = 5;
    LevelAdvancement advancementPace = 6;
}


// This is not a 'token' to be added to a list. It's the maximum amount of characters the server will consider from the client.
// The client can send as many messages it wants as long as it fits the budget but can only do so by waiting at least period
// between successive messages. This avoids flooding. A message (n+1) after less than period will be discarded.
// Honoring delay is not required with the first PeerMessage sent.
// A message of this type will always be replied after a PeerMessage to estabilish a delay in other cases.
message CharBudget {
    uint32 total = 1;
    uint32 period = 2; // in milliseconds, clients are suggested to wait slightly more before re-enabling messaging
    uint32 charSpecific = 3; // when this is != 0 then this is index+1 of the character on device gaining the budget.
}


// For the purpose of computing char budget consumption this string has special rules.
// If string is empty, cost of sending it is 50*number_of_empty_strings_sent_consecutively_before_this++.
// Otherwise, cost is length, number_of_empty_strings_sent_consecutively_before_this = 0.
// The first non-empty string sent causes the server to promote the client to Identified phase.
message PeerMessage {
    string text = 1;
    uint32 charSpecific = 2; // when this is != 0 then this is index+1 of the character on device gaining the budget.
}


// Server to client. This would be better sent over cryptographic security channels as the data is to be hashed.
message GroupFormed {
    bytes salt = 1; // Concatenate salt to group name and hash to obtain a device key for later joining the group.
    
    // The following is valid only if salt is empty.
    // This message is also re-used to confirm characters to peers.
    uint32 peerKey = 2; // key corresponding to character definition
    bool accepted = 3; // false: server kicked character, start from scratch. True: server recorded character, lock it up.
}


// Client <-> server.
message PlayingCharacterDefinition {
    string name = 1;
    uint32 initiativeBonus = 2;
    uint32 healthPoints = 3;
    uint32 experience = 4;
    uint32 peerKey = 5; // When client sends a new proposal to server, this will be used to identify the PC relative to the peer, must be unique. Reusing the same key re-defines a character. Server uses this as well, see PlayingCharacterList.
    
    LevelClass career = 6;
    
    // When this is != 0 only .peerKey is valid. This is an unique uint to be used to send a character level up request.
    // It is some sort of a 'ticket' to be used once. The server will approve chars or not and send GroupFormed as usual.
    uint32 redefine = 7;
}


// Server -> client
message PhaseControl {
    Type type = 1;
    bool terminated = 2;
    repeated uint32 yourChars = 3;
    // ^ Group ready as result of character ownership assignment, list of peerkeys.
    // The client will then send LiveActorDataRequest objects to get the full info about the clients.
    
    enum Type {
        T_INVALID = 0;
        T_NO_MORE_DEFINITIONS = 1; // PC definition phase terminated, if terminated is false then go adventuring.
        T_DEFINITIVE_CHAR_ASSIGNMENT = 2; // PCs have been negotiated, .yours assigned to you, go 'play session'
        T_SESSION_ENDED = 3; // no other fields are valid. Goodbye. Always terminate battle before session!
    }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Below: normal 'adventuring' sub-protocol.
// After the client has produced a Hello demostrating it has the valid key,
// the server will send a stream of PlayingCharacterDefinition. Clients take those and put them in their AVAILABLE list.
// Further PlayingCharacterDefinition can come at any time. They are guaranteed to have unique peerKey.
//
// The clients handshake character ownership by using CharacterOwnership messages.
// When the client sends a CharacterOwnership, it requests the server for one of the following actions:
// - Move a character from AVAILABLE to me
// - Move a character from me to AVAILABLE
// Clients are assumed to never have more than 1 request per character peerKey so they can be trivially mapped.
// The server sequentializes all requests and replies to each one using CharacterOwnership as well. Those come in three flavours
// depending on what was sent. The bottom line is a CharacterOwnership is invalid if its .ticket is different from the server order.
// This makes possible to understand which requests are obsolete and discard them.
//
// The server starts from .ticket=0.
// The next valid ticket will be .ticket=1, one client will get it, the others will be invalid and discarded.
// All well formed requests get a reply. How?
// As a start, all clients but the first get an .type=OBSOLETE reply with the .ticket they used. They will have to retry.
// The first client instead gets either .type=ACCEPTED or .type=REJECTED.
// 
// However, there are a few special behaviours where the server sends CharacterOwnership unsolicited:
// - Server can give a character to a client forcefully: YOURS
// - Server can move a character back to unassigned list, taking it away from a client: AVAIL
// - Server informs peers a certain character has been assigned to someone: BOUND
//
// The process continues until the server decides to send a GroupReady message with a populated .yours array.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
message CharacterOwnership {
    uint32 character = 1; // unique group id, as in PlayingCharacterDefinition.peerKey
    uint32 ticket = 2; // client->server: sequentializing index, server->client next ticket considered valid.
    enum Type {
        REQUEST = 0;  // client->server, only valid value otherwise server will just discard
        OBSOLETE = 1; // server->client, try again!
        ACCEPTED = 2; // server->client, your request regarding .character is ok, char is now yours or to avail, as you asked
        REJECTED = 3; // server->client, keep ownership assignment as previously.
        
        YOURS = 4; // unsolicited server->client
        AVAIL = 5; // unsolicited server->client
        BOUND = 6; // unsolicited server->client
    }
    Type type = 3;
}


// Server <-> Client.
// When .range is != 0 then this is Server->Client, roll request.
// If .range is 0 then this is client->server, due to modifiers this can be any value.
// Multiple rolls can be in flight, they are matched by .unique.
// Who must roll? If this is server->client then .peerKey is valid and specifies the actor to roll with.
// So, a device with multiple actors gets multiple RollRequests. It will have to collect them somehow and reply to all
// of them. It is not required to reply in order however.
message Roll {
    string note = 1;   // master gives an hint to player
    uint32 unique = 2; // multiple rolls can be in flight at once
    uint32 range = 3;
    uint32 peerKey = 4;
    int32 result = 5;
    Type type = 6; // this is just an hint to other peer. In particular, replies get their true type from matching unique
    
    enum Type {
        T_MISC = 0;
        T_INITIATIVE = 1; // when asking an initiative roll, clients will likely go battle mode
    }
}

// Server<->Client
// When sent by server, this is the new order of battle. It is used for the 'shuffle order' dialog.
// When sent by client it is a 'shuffle request'. They are ignored if invalid or applied with no confirmation.
// In all cases, there's no reply (albeit shuffles generate a new order).
message BattleOrder {
    uint32 asKnownBy = 1; // each list is specific to a certain actor. Some actors might be unknown to others.
    repeated uint32 order = 2;
    // Server: current known order. Most likely including unknown actors.
    // Client: a single value, new position in order.
}

// Server -> client (mostly)
// Sent by the server to let an actor on a remote device play. Can also terminate its turn.
// OFC it is specific to an actor on this device.
message TurnControl {
    enum Type {
        T_FORCE_DONE = 0; // this can be sent by client as well to indicate round is finished. The server can then ignore .peerKey and go with its own state. .round ignored.
        T_REGULAR = 1;
        T_PREPARED_TRIGGERED = 2;
        T_OPPORTUNITY = 3;
        
        T_BATTLE_ENDED = 32;
        T_BATTLE_ROUND = 33; // used when server restored state, notifies battle start and sets current round, other fields are ignored
    }
    Type type = 1;
    uint32 peerKey = 2;
    uint32 round = 3; // while we're at it, we always push round so the client knows.
}


// Server -> Client; define/update actor.
// Client -> Server only allowed with T_PARTIAL_PREPARE_CONDITION
message ActorState {
    enum Type {
        T_UNDEFINED = 0; // can be used when storing, if type can be inferred from position.
        T_PLAYING_CHARACTER = 1;
        T_NPC = 2;
        T_MOB = 3;
        
        T_PARTIAL_PREPARE_CONDITION = 16; // client can send those, only .prepareCondition and peerKey will be mangled. Server can also send those to cancel a trigger action.
    }
    Type type = 1;
    uint32 peerKey = 2;
    string name = 3;
    int32 currentHP = 4;
    uint32 maxHP = 5;
    string prepareCondition = 6;
    bool preparedTriggered = 7;
    
    // Those are not typically used across the wire but they are useful to have at runtime!
    int32 initiativeBonus = 128;
    
    message ChallangeRatio {
        uint32 numerator = 1; // must be at least 1.
        uint32 denominator = 2; // if numerator === 1 can be 8|6|4|3|2|1 else must be 1
    }
    ChallangeRatio cr = 129; // used to track XP value of monsters at runtime, not sent across the wire. Initialized from monster data.
    uint32 experience = 130;
}
