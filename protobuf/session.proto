syntax = "proto3";
option java_package = "com.massimodz8.collaborativegrouporder.protocol";
import "google/protobuf/timestamp.proto";
import "network.proto";

// Each session file starts with an object of this type. It is the same for client and server and keeps track of various
// real-world related statistics.
message Suspended {
    google.protobuf.Timestamp lastBegin = 1; // time started of last session.
    google.protobuf.Timestamp lastSaved = 2; // aka 'end', for what we are concerned. Real world hours.
    google.protobuf.Timestamp spent = 3; // .seconds spent playing so far.
    uint32 numSessions = 4;
    string note = 5;
    repeated uint32 notFighting = 6 [packed=true]; // by default, all actors are supposed to be in fight.
        // When a peer key is specified there, then the corresponding actor was NOT selected in FreeRoamingActivity listing
        // and so it isn't in battle.
    repeated ActorState live = 7;
    BattleState fighting = 8;
}


// Transitioning to battle at runtime takes some time: various throw dice requests must be sent and we must wait for result.
// BattleActivity is started on the server only when we have all initiatives: only then the battleState can be created.
message BattleState {
    uint32 round = 1;
    uint32 currentActor = 2;
    bool prevWasReadied = 3; // see BattleHelper.java
    repeated uint32 interrupted = 4 [packed=true];
    
    // Must all count an element each actor in the battle and the elements must be in the same order across arrays.
    repeated int32 initiative = 5 [packed=true]; // each 'element' here is a triplet: dice rolled, bonus and rand to restore InitiativeScore values
    repeated uint32 id = 6 [packed=true];
    repeated bool enabled = 7 [packed=true];
}
