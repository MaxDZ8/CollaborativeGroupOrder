syntax = "proto3";
option java_package = "com.massimodz8.collaborativegrouporder.protocol";
import "google/protobuf/timestamp.proto";

// This is more or less 'static' stuff you would write in your character sheet.
// That is, if you are the server. For the client it's just simple cryptographic key.
// The important stuff is: when a new session begins, this is the data we load.
// Then, if there is session data, we apply the data we find there.

// I could borrow some definitions from network.proto but I rather keep everything easy and independant.
message PartyOwnerData {
    uint32 version = 1;
    repeated Group everything = 2;
	LevelAdvancement levels = 3;
    
    message DeviceInfo {
        bytes salt = 1; // Unique salt to uniquely identify device. Never empty, counting at least 64 bytes.
        string name = 2; // presentation name, tag entered by user. Not guaranteed unique in the group.
        string avatarFile = 3; // one file to be loaded to identify user, from assets directory.
    }

    message Group {
        string name = 1;
        repeated DeviceInfo devices = 2;
        repeated ActorDefinition party = 3; // those actors can be assigned to players
        repeated ActorDefinition npcs = 4; // those are managed by master
        string imageFile = 5; // group images are cool as well, used for the service notification.
        google.protobuf.Timestamp created = 6;
        string sessionFile = 7; // the session file is created even before this party is saved
        
        // Note: there's no "current group state" anymore, store them somewhere else
    }
}


enum LevelAdvancement {
    LA_UNSPECIFIED = 0;
	
	LA_PF_FAST = 1;
	LA_PF_MEDIUM = 2;
	LA_PF_SLOW = 3;
}

    
// Holds information about the (N)PC regarding its 'starting' status when a new battle is initiated.
// Also tracks level advancement.
// It's the stuff you would write using a pen in the character sheet. Temporary effects and per-battle data not there.
message ActorDefinition {
    string name = 1;
    uint32 level = 2;
    uint32 experience = 3;
    string avatarFile = 4;
    repeated ActorStatistics stats = 5; // at least 1 or error. stats[0] is character level, stats[1] is level-1 etc... character history
}


// those are sort-of like "pure" stateless statistics as of when you roll a level up or copy a PG sheet.
message ActorStatistics {
    uint32 initBonus = 1;
    int32 healthPoints = 2; // Group.usually -> full health, otherwise current health
}


// Client information about a group. I make it completely distinct to take it easy.
message PartyClientData {
    uint32 version = 1;
    repeated Group everything = 2;
    
    message Group {
        string name = 1;
        bytes key = 2;
        google.protobuf.Timestamp received = 3;
        string sessionFile = 4;
    }
}
